const 
	express = require("express"),
	bodyParser = require('body-parser'),
	webapp = express(),
	CryptoJS = require("crypto-js");

webapp.listen(8088); 
  
webapp.use("/captiveCloudTrax*", function(req,res) {
	// http://localhost:8088/captiveCloudTrax?res=notyet&uamip=1.1.1.1&uamport=8081&mac=CC-2D-B7-75-3B-CD&cip=192.168.13.10&called=AC-86-74-BA-A6-15&ssid=CloudTraxGuest&nasid=9000&userurl=http%3A%2F%2Fcaptive.apple.com%2Fhotspot-detect.html&challenge=440EF96DB9A2225C32E031659DF2608B49932F0D8AFAC46F74FA56FF3E1AE952
	// Release: http://$uamip:$uamport/logon?username=skjkdsfj&password=guest  (should be encoded)
	// https://help.cloudtrax.com/hc/en-us/articles/205014660-Externally-Hosted-Splash-Page-with-RADIUS-Authentication
 	console.log("GET /captiveCloudTrax");
	var params = parseQueryString(req.url);
	var cloudtraxSplashSecret = 'MySecret';  // Configure same value in CloudTrax
  // Parse the Captive Portal String and Prepare Respose
	var newRedirect = `http://${params.uamip}:${params.uamport}/logon?username=${params.mac}&password=${encodeCloudtraxPassword('password', params.challenge, cloudtraxSplashSecret)}&redir=https://google.com`;
	res.redirect(newRedirect);
});


function parseQueryString (url) {
	//var query = url.split("?").pop();
	url = decodeURIComponent(url.replace(/\+/g,  " "));
	var query = url.substring(url.indexOf("?")+1);
	var pairs = query.split("&");
	//console.log(pairs);
	var params = {};
	for (var i = 0; i < pairs.length; i++) {
		var temp = pairs[i].split("=");
		params[temp[0]] = temp[1];
	}
	if (params.switchip && params.url) {
		params.url = url.substring(url.indexOf("url=")+4);
	}
	if (params.redirect) {
		params.redirect = url.substring(url.indexOf("redirect=")+9);
	}
	params.query = query;
	return(params);
}


////////////////////////////////////////////////////////////////
// Cloudtrax Password Functions

function encodeCloudtraxPassword(plain, challenge, secret) {
	console.log(` encodeCloudtraxPassword: ${plain} ${challenge} ${secret}`);
	var hexchall = hexStrToByteArr(challenge);

	if (!hexchall)
		return false;

	var crypt_secret = hexchall;
	if (secret.length > 0) {
		var merged = byteArrToHexStr(hexchall) + strToHexStr(secret);
		var md5str = CryptoJS.MD5(CryptoJS.enc.Hex.parse(merged)).toString(CryptoJS.enc.Hex);
		crypt_secret = hexStrToByteArr(md5str);
	} else {
		crypt_secret = hexchall;
	}

	var len_secret = crypt_secret.length;

	var hexplain = strToByteArr(plain + "\x00");

	var crypted = new Uint8Array(hexplain.length);
	for (var i = 0; i < hexplain.length; i++) {
		crypted[i] = hexplain[i] ^ crypt_secret[i % len_secret];
	}

	return byteArrToHexStr(crypted);
}

function hexStrToByteArr(hexStr) {
	var bytes = [];
	for (var i = 0; i < hexStr.length - 1; i += 2)
		bytes.push(parseInt(hexStr.substr(i, 2), 16));
	return Uint8Array.from(bytes)
}

function strToByteArr(str) {
	var bytes = [];
	for (var i = 0; i < str.length; i++)
		bytes.push(str.charCodeAt(i));
	return Uint8Array.from(bytes)
}

function byteArrToHexStr(byteArr) {
	var str = '';
	for (var i in byteArr) {
		str += ('0' + byteArr[i].toString(16)).slice(-2);
	}
	return str;
}

function strToHexStr(str) {
	return byteArrToHexStr(strToByteArr(str));
}
// Cloudtrax Password Functions
////////////////////////////////////////////////////////////////
